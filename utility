#pragma once

#include <cstddef>
#include <type_traits>

namespace std {

template <typename T> T declval();

template <typename T> T &declref();

template <typename T> constexpr remove_reference_t<T> &&move(T &&t) noexcept {
  return static_cast<remove_reference_t<T> &&>(t);
}

template <typename T> constexpr T &&forward(remove_reference_t<T> &param) {}

template <typename T> constexpr T &&forward(remove_reference_t<T> &&param) {
  return static_cast<T &&>(param);
}

template <typename T, typename U = T> constexpr T exchange(T &slot, U &&value) {
  T old = std::move(slot);
  slot = std::forward<U>(value);
  return old;
}

template <typename T> constexpr void swap(T &lhs, T &rhs) {
  T tmp = std::move(lhs);
  lhs = std::move(rhs);
  rhs = std::move(tmp);
}

template <size_t... Ints> struct index_sequence {
  using type = index_sequence;
  using value_type = size_t;
  static constexpr size_t size() noexcept { return sizeof...(Ints); }
};

template <class Sequence1, class Sequence2> struct _merge_and_renumber;

template <size_t... I1, size_t... I2>
struct _merge_and_renumber<index_sequence<I1...>, index_sequence<I2...>>
    : index_sequence<I1..., (sizeof...(I1) + I2)...> {};

template <size_t N>
struct make_index_sequence
    : _merge_and_renumber<typename make_index_sequence<N / 2>::type,
                          typename make_index_sequence<N - N / 2>::type> {};

template <> struct make_index_sequence<0> : index_sequence<> {};
template <> struct make_index_sequence<1> : index_sequence<0> {};

} // namespace std
