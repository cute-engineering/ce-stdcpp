#pragma once

#include <cstddef>

namespace std {

template <typename ReturnType, typename... Args>
struct coroutine_traits {
    using promise_type = typename ReturnType::promise_type;
};

template <typename Promise = void>
struct coroutine_handle;

template <>
struct coroutine_handle<void> {
    template <typename Promise>
    friend struct coroutine_handle;

    static coroutine_handle<> from_address(void *frame) {
        return coroutine_handle<>{frame};
    }

    constexpr coroutine_handle() = default;

    constexpr coroutine_handle(std::nullptr_t) {}

    explicit operator bool() {
        return _frame;
    }

    void *address() {
        return _frame;
    }

    bool done() const {
        return __builtin_coro_done(_frame);
    }

    void resume() {
        __builtin_coro_resume(_frame);
    }

    void destroy() {
        __builtin_coro_destroy(_frame);
    }

    void operator()() {
        resume();
    }

private:
    explicit coroutine_handle(void *frame)
        : _frame{frame} {}

    void *_frame = nullptr;
};

template <typename Promise>
struct coroutine_handle : coroutine_handle<> {
    coroutine_handle() = default;

    coroutine_handle(std::nullptr_t) {}

    static coroutine_handle<Promise> from_promise(Promise &p) {
        auto frame = __builtin_coro_promise(&p, alignof(Promise), true);
        return coroutine_handle{frame};
    }

    Promise &promise() {
        auto p = __builtin_coro_promise(_frame, alignof(Promise), false);
        return *static_cast<Promise *>(p);
    }

    Promise const &promise() const {
        auto p = __builtin_coro_promise(_frame, alignof(Promise), false);
        return *static_cast<Promise const *>(p);
    }

private:
    explicit coroutine_handle(void *frame)
        : coroutine_handle<>{frame} {}
};

struct suspend_never {
    constexpr bool await_ready() const noexcept { return true; }
    constexpr void await_suspend(coroutine_handle<>) const noexcept {}
    constexpr void await_resume() const noexcept {}
};

struct suspend_always {
    constexpr bool await_ready() const noexcept { return false; }
    constexpr void await_suspend(coroutine_handle<>) const noexcept {}
    constexpr void await_resume() const noexcept {}
};

} // namespace std
